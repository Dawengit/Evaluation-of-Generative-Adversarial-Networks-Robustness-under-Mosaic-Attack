# -*- coding: utf-8 -*-
"""Evaluation_PSNR_SSIM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L1VBacqrHAWNjwfMj6-XReUHlsWyPsDT
"""

import os
import numpy as np
from skimage.metrics import structural_similarity as ssim
from skimage.metrics import peak_signal_noise_ratio as psnr
from PIL import Image

# Define the directories for predicted images and ground truth images
# Plz change them to your path

pred_dir = 'testdataset_predict_result'  # Directory for predicted images
gt_dir = 'testdataset_predict_ground_truth'  # Directory for ground truth images

# Ensure that the directories exist
if not os.path.exists(pred_dir) or not os.path.exists(gt_dir):
    raise FileNotFoundError("The predicted or ground truth directory does not exist. Please check the paths!")

# Get the list of files in each directory and sort them to ensure matching
pred_files = sorted(os.listdir(pred_dir))
gt_files = sorted(os.listdir(gt_dir))

if len(pred_files) != len(gt_files):
    raise ValueError("The number of predicted and ground truth files does not match. Please check the folder contents!")

print(f"Found {len(pred_files)} pairs of predicted and ground truth images.")

# Initialize lists to store PSNR and SSIM values
psnr_values = []
ssim_values = []

# Iterate over all file pairs
for pred_file, gt_file in zip(pred_files, gt_files):
    # Load the predicted and ground truth images
    pred_path = os.path.join(pred_dir, pred_file)
    gt_path = os.path.join(gt_dir, gt_file)

    pred_img = np.array(Image.open(pred_path).convert('RGB'))  # Ensure RGB format
    gt_img = np.array(Image.open(gt_path).convert('RGB'))  # Ensure RGB format

    # Check if the dimensions of the images match
    if pred_img.shape != gt_img.shape:
        raise ValueError(f"Image size mismatch: {pred_file} and {gt_file}")

    # Calculate PSNR and SSIM, setting win_size=3 for small images
    psnr_value = psnr(gt_img, pred_img, data_range=255)  # Compute PSNR
    ssim_value = ssim(gt_img, pred_img, data_range=255, win_size=3, channel_axis=-1)  # Compute SSIM

    # Append the values to the lists
    psnr_values.append(psnr_value)
    ssim_values.append(ssim_value)

    print(f"File: {pred_file} | PSNR: {psnr_value:.2f} | SSIM: {ssim_value:.4f}")


